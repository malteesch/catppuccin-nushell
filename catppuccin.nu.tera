---
whiskers:
    version: "2.5.1"
    hex_format: "#{{r}}{{g}}{{b}}"
---
const palettes = {
{%- for name, flavor in flavors %}
    {{name}}: {
    {%- for colorName, color in flavor.colors %}
        {{colorName}}: "{{color.hex}}"
    {%- endfor %}
    }
{%- endfor %}
}

{% raw %}
export def main [flavor: string = "mocha"] {
    let palette = ($palettes | get $flavor)
    {
        # color for nushell primitives
        separator: $palette.text
        leading_trailing_space_bg: { attr: n } # no fg, no bg, attr none effectively turns this off
        header: $palette.subtext0
        empty: $palette.red
        bool: $palette.peach
        int: $palette.text
        filesize: $palette.teal
        duration: $palette.text
        date: {|| $in | evalDate $palette }
        range: $palette.text
        float: $palette.maroon
        string: $palette.green
        nothing: $palette.text
        binary: $palette.text
        cell-path: $palette.text
        row_index: $palette.overlay1
        record: $palette.text
        list: $palette.subtext0
        block: $palette.overlay2
        hints: $palette.overlay0
        search_result: { bg: $palette.red fg: $palette.crust }
        shape_and: $palette.mauve
        shape_binary: $palette.mauve
        shape_block: $palette.overlay2
        shape_bool: $palette.peach
        shape_closure: $palette.overlay2
        shape_custom: $palette.green
        shape_datetime: $palette.sapphire
        shape_directory: $palette.maroon
        shape_external: $palette.blue
        shape_externalarg: $palette.red
        shape_external_resolved: { fg: $palette.yellow attr: 'b' }
        shape_filepath: $palette.lavender
        shape_flag: $palette.peach
        shape_float: $palette.peach
        shape_garbage: { fg: $palette.crust bg: $palette.red }
        shape_glob_interpolation: $palette.teal
        shape_globpattern: $palette.teal
        shape_int: $palette.peach
        shape_internalcall: { fg: $palette.mauve attr: 'b' }
        shape_keyword: $palette.mauve
        shape_list: $palette.subtext0
        shape_literal: $palette.blue
        shape_match_pattern: $palette.green
        shape_matching_brackets: { attr: u }
        shape_nothing: $palette.sky
        shape_operator: $palette.teal
        shape_or: $palette.mauve
        shape_pipe: $palette.sapphire
        shape_range: { fg: $palette.yellow attr: 'b' }
        shape_record: $palette.lavender
        shape_redirection: { fg: $palette.mauve attr: 'b' } 
        shape_signature: $palette.mauve
        shape_string: $palette.green
        shape_string_interpolation: $palette.green
        shape_table: { fg: $palette.blue attr: 'b' }
        shape_variable: $palette.text
        shape_vardecl: $palette.text
        shape_raw_string: $palette.overlay0
    }
}
{% endraw %}

def evalDate [palette: record] datetime -> string {
    match ($in | untilNow) {
        $dur if ($dur | durationBetween 0sec 1min) => $palette.sapphire,
        $dur if ($dur | durationBetween 1min 5min) => $palette.blue,
        $dur if ($dur | durationBetween 5min 1hr) => $palette.lavender,
        $dur if ($dur | durationBetween 1hr 8hr) => $palette.text,
        $dur if ($dur | durationBetween 8hr 16hr) => $palette.subtext1,
        $dur if ($dur | durationBetween 16hr 1day) => $palette.subtext0,
        $dur if ($dur | durationBetween 1day 5day) => $palette.overlay2,
        $dur if ($dur | durationBetween 5day 1wk) => $palette.overlay1,
        _ => $palette.overlay0
    }
}

def untilNow [date?: datetime] datetime -> duration {
    if $date == null {
        (date now) - $in
    } else {
        (date now) - $date
    }
}

def durationBetween [start: duration, end: duration] duration -> boolean {
    $in > $start and $in < $end
}
